rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ===================================================================
    // --- HELPER FUNCTIONS (सहायक फ़ंक्शंस) ---
    // In functions ka istemal rules ko saaf aur padhne me aasan banane ke liye kiya gaya hai.
    // ===================================================================

    /**
     * Check karta hai ki user ek Admin hai ya nahi.
     * Yeh user ke Firebase Auth token me `isAdmin: true` custom claim par nirbhar karta hai.
     * Custom claims roles ko handle karne ka sabse surakshit aur prabhavi tareeka hai.
     */
    function isAdmin() {
      return request.auth != null && request.auth.token.isAdmin == true;
    }

    /**
     * Check karta hai ki request karne wale user ki UID (Firebase Auth UID) di gayi UID se match karti hai ya nahi.
     */
    function isRequestingUser(uid) {
      return request.auth != null && request.auth.uid == uid;
    }

    /**
     * Check karta hai ki user us document ka malik hai jise woh access kar raha hai.
     * Yeh requester ki UID ko document ke andar store ki gayi UID se compare karta hai.
     * Yeh `users` collection ke liye upyogi hai.
     */
    function isOwnerOfDoc() {
      return isRequestingUser(resource.data.auth.provider.uid);
    }

    /**
     * Check karta hai ki user apne liye hi document bana raha hai ya nahi.
     */
    function isCreatingOwnDoc() {
        return isRequestingUser(request.resource.data.auth.provider.uid);
    }

    /**
     * Check karta hai ki user us document ka malik hai jo ek custom user ID (e.g., USR-...) ke through link hai.
     * Yeh `users` collection se user ka auth UID nikal kar tulna karta hai.
     * Yeh 'accounts', 'logs', 'orders' jaise collections ke liye istemal hota hai.
     */
    function isOwnerOfLinkedDoc(customUserId) {
      return isRequestingUser(get(/databases/$(database)/documents/users/$(customUserId)).data.auth.provider.uid);
    }

    // ===================================================================
    // --- PUBLIC COLLECTIONS (सार्वजनिक संग्रह) ---
    // In collections ko koi bhi (bina login kiye user bhi) padh sakta hai.
    // Yeh app ko shuruaati data (jaise items, categories) dikhane ke liye zaroori hai.
    // Inme likhne (write) ki anumati sirf Admins ko hai.
    // ===================================================================
    match /items/{itemId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /categories/{categoryId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /promotions/{promoId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /brands/{brandId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /units/{unitId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    match /merchants/{merchantId} {
      allow read: if true; // Merchant profile sabhi ko dikhega
      allow update: if isOwnerOfLinkedDoc(resource.data.meta.links.userId) || isAdmin();
      allow create: if isOwnerOfLinkedDoc(request.resource.data.meta.links.userId) || isAdmin();
      allow delete: if isAdmin();
    }
    match /stories/{merchantId} {
      allow read: if true; // Stories sabhi ko dikhengi
      allow create: if isOwnerOfLinkedDoc(request.resource.data.meta.links.userId) || isAdmin();
      allow update, delete: if isOwnerOfLinkedDoc(resource.data.meta.links.userId) || isAdmin();
    }

    // NEW: Rules for posts collection
    match /posts/{postId} {
      allow read: if true; // Anyone can read posts
      allow create: if isOwnerOfLinkedDoc(get(/databases/$(database)/documents/merchants/$(request.resource.data.meta.links.merchantId)).data.meta.links.userId) || isAdmin();
      allow update, delete: if isOwnerOfLinkedDoc(get(/databases/$(database)/documents/merchants/$(resource.data.meta.links.merchantId)).data.meta.links.userId) || isAdmin();
    }

    // ===================================================================
    // --- USER-CENTRIC COLLECTIONS (उपयोगकर्ता-केंद्रित संग्रह) ---
    // In collections ke rules user ke ownership par aadharit hain.
    // ===================================================================

    match /users/{userId} {
      // GET: Ek user apna document padh sakta hai. Admin kisi ka bhi.
      // A user can get their own document, or an admin can get any document.
      allow get: if isOwnerOfDoc() || isAdmin();

      // LIST: Sirf logged-in user hi users collection ko query kar sakte hain (e.g., phone number check ke liye).
      // Only an admin can list all users (for the impersonation tool).
      allow list: if isAdmin();

      // UPDATE: User apna profile update kar sakta hai, ya Admin kisi ka bhi.
      allow update: if isOwnerOfDoc() || isAdmin();
      // CREATE: Naya user apna profile bana sakta hai.
      allow create: if isCreatingOwnDoc() || isAdmin();
      // DELETE: Sirf Admin hi user profile delete kar sakta hai.
      allow delete: if isAdmin();
    }

    match /accounts/{accountId} {
      // GET/UPDATE: User can get/update their own account, or an admin can.
      allow get, update: if isOwnerOfLinkedDoc(resource.data.meta.links.userId) || isAdmin();
      // LIST: Only an admin can list all accounts.
      allow list: if isAdmin();
      // Naya account banate samay, user logged-in hona chahiye.
      allow create: if request.auth != null;
      allow delete: if isAdmin();
    }

    match /orders/{orderId} {
      // GET/UPDATE: User can get/update their own order, or an admin can.
      allow get, update: if isOwnerOfLinkedDoc(resource.data.meta.links.userId) || isAdmin();
      // LIST: Only an admin can list all orders.
      allow list: if isAdmin();
      allow create: if isOwnerOfLinkedDoc(request.resource.data.meta.links.userId) || isAdmin();
      allow delete: if isAdmin();
    }

    match /alerts/{alertId} {
      // GET/UPDATE: User can get/update their own alert, or an admin can.
      allow get, update: if isOwnerOfLinkedDoc(resource.data.meta.links.userId) || isAdmin();
      // LIST: Only an admin can list all alerts.
      allow list: if isAdmin();
      allow create: if isOwnerOfLinkedDoc(request.resource.data.meta.links.userId) || isAdmin();
      allow delete: if isAdmin();
    }

    // ===================================================================
    // --- FEEDBACK & RATING COLLECTIONS ---
    // In collections me koi bhi (guest bhi) data likh sakta hai, lekin padh sirf Admin sakte hain.
    // ===================================================================

    match /feedbacks/{feedbackId} {
      // Koi bhi (logged-in user ya guest) naya feedback bana sakta hai.
      allow create: if request.auth != null || request.resource.data.meta.flags.guest == true;
      // Sirf admins hi feedback padh, update, ya delete kar sakte hain.
      allow read, update, delete: if isAdmin();
    }

    match /ratings/{ratingId} {
      // Koi bhi (logged-in user ya guest) nayi rating de sakta hai.
      allow create: if request.auth != null || request.resource.data.meta.flags.guest == true;
      // Sirf admins hi ratings padh, update, ya delete kar sakte hain.
      allow read, update, delete: if isAdmin();
    }

    // NEW: Rules for comments on posts
    match /comments/{commentId} {
      allow read: if true; // Anyone can read comments
      allow create: if request.auth != null; // Any logged-in user can create a comment
      allow update, delete: if isOwnerOfLinkedDoc(resource.data.meta.links.userId) || isAdmin(); // Only the comment owner or an admin can delete
    }


    // ===================================================================
    // --- ADMIN & SYSTEM COLLECTIONS (एडमिन और सिस्टम संग्रह) ---
    // In collections ko sirf Admins ya system hi access kar sakte hain.
    // ===================================================================

    match /logs/{logId} {
      // GET: User apna log dekh sakta hai, Admin kisi ka bhi.
      allow get: if isOwnerOfLinkedDoc(resource.data.meta.links.userId) || isAdmin();
      // LIST: Sirf Admin hi sabhi logs ki list dekh sakta hai (admin dashboard ke liye).
      allow list: if isAdmin();
      // CREATE: Log banate samay user logged-in hona chahiye.
      allow create: if request.auth != null;
      allow delete: if isAdmin();
    }

    // `counters` collection ka istemal atomic रूप से IDs generate karne ke liye hota hai.
    match /counters/{counterId} {
      allow read, write: if request.auth != null || isAdmin();
    }

    match /price-logs/{priceLogId} {
        allow read, write: if isAdmin();
    }

    // `campaigns` ka istemal mass-messaging ke liye hota hai, jise sirf Admins manage kar sakte hain.
    match /campaigns/{campaignId} {
      allow read, write: if isAdmin();
    }
  }
}

// deploy code > 
//firebase deploy --only firestore:rules